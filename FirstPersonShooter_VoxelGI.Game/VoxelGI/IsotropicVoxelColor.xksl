// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

namespace Xenko.Rendering.Skyboxes
{
    /// <summary>
    /// Sample a cubemap using the MaterialPixelShadingStream roughness parameter.
    /// </summary>
    shader IsotropicVoxelColor : IComputeVoxelColor, Texturing, MaterialPixelShadingStream
    {
        cbuffer PerView.Lighting
        {
            float MipCount;
            float ClipMapCount;
        }

        rgroup PerView.Lighting
        {
            Texture3D VoxelVolume;
            Texture3D VoxelMipMaps;
            Texture3D VoxelVolumeR1;
            Texture3D VoxelVolumeR2;
            Texture3D VoxelVolumeR3;
            Texture3D VoxelVolumeR4;
            Texture3D VoxelVolumeR5;
            Texture3D VoxelVolumeR6;
        }

        override float4 Compute(float3 position, float radius)
        {
            radius = max(1,radius);
            float lod = min(6,log2(radius));
            float baselod = floor(min(lod,1));
            
            float3 texrayPos = position;

            float mip = lod-2;
            float3 finalClipMapPos = ((texrayPos-0.5) * 0.5 + 0.5);
            float4 tex3 = VoxelMipMaps.SampleLevel(Sampler,finalClipMapPos,mip);

            if (mip>0.0)
                return tex3;

            float3 texrayPos1 = ((texrayPos-0.5) * (pow(2,-baselod)) + 0.5)/float3(1,1,2) + float3(0,0,baselod/2);
            float4 tex1 = VoxelVolume.SampleLevel(Sampler,texrayPos1,0);


            if (mip>-1.0)
                return lerp(tex1,tex3,mip+1.0);

            float3 texrayPos2 = ((texrayPos-0.5) * (pow(2,-baselod)*0.5) + 0.5)/float3(1,1,2) + float3(0,0,(baselod+1.0)/2);
            float4 tex2 = VoxelVolume.SampleLevel(Sampler,texrayPos2,0);

            return lerp(tex1,tex2,lod-baselod);
        }
    };
}
