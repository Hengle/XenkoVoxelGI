namespace Xenko.Rendering.Voxels
{
    shader VoxelMipmapSimple : Math, Texturing, ComputeShaderBase
    {
        stage float3 ReadOffset;
		stage Texture3D<half4> ReadTex;
		stage RWTexture3D<half4> WriteTex;
        override void Compute()
        {
            uint3 pos = streams.DispatchThreadId;

            uint3 posR = pos*2+(uint3)ReadOffset;
            float4 fragmentSum = (
                ReadTex.Load(int4(posR, 0)) +
                ReadTex.Load(int4(posR + uint3(1, 0, 0), 0)) +
                ReadTex.Load(int4(posR + uint3(1, 1, 0), 0)) +
                ReadTex.Load(int4(posR + uint3(1, 0, 1), 0)) +
                ReadTex.Load(int4(posR + uint3(0, 1, 1), 0)) +
                ReadTex.Load(int4(posR + uint3(0, 1, 0), 0)) +
                ReadTex.Load(int4(posR + uint3(0, 0, 1), 0)) +
                ReadTex.Load(int4(posR + uint3(1, 1, 1), 0))
            );
            WriteTex[pos] = (fragmentSum / 8.0);
        }
    };
}
