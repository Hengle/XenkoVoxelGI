//namespace Xenko.Rendering.Skyboxes
//{
    shader VoxelAnisotropicSampler : IVoxelSampler, Texturing
    {
        compose VoxelStorageTextureShader storage;
        override float4 Sample(float3 position, float3 normal, float radius)
        {
            float4 sum = float4(0,0,0,0);

            if (normal.x>0)
                sum += storage.Sample(position, radius, 0)*normal.x;
            else
                sum += storage.Sample(position, radius, 1)*-normal.x;
            if (normal.y>0)
                sum += storage.Sample(position, radius, 2)*normal.y;
            else
                sum += storage.Sample(position, radius, 3)*-normal.y;
            if (normal.z>0)
                sum += storage.Sample(position, radius, 4)*normal.z;
            else
                sum += storage.Sample(position, radius, 5)*-normal.z;

            return sum;
        }
        override float4 SampleRaw(float3 pos, float mipmap, int textureID, int axis)
        {
            return storage.SampleRaw(pos, mipmap, textureID, axis);
        }
override float VoxelSize()
        {
            return storage.VoxelSize();
        }
override float4 Test()
        {
            return float4(0,1,0,1);
        }
    };
//}
