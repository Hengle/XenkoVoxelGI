//namespace Xenko.Rendering.Skyboxes
//{
    shader VoxelAnisotropicSampler : IVoxelSampler, Texturing
    {
        compose VoxelStorageTextureShader storage;
        override float4 Sample(float3 position, float3 normal, float diameter)
        {
            float4 sum = float4(0,0,0,0);

    /*if (normal.x>0)
        sum += storage.Sample(position, diameter, 0)*normal.x;
    else
        sum += storage.Sample(position, diameter, 1)*-normal.x;
    if (normal.y>0)
        sum += storage.Sample(position, diameter, 2)*normal.y;
    else
        sum += storage.Sample(position, diameter, 3)*-normal.y;
    if (normal.z>0)
        sum += storage.Sample(position, diameter, 4)*normal.z;
    else
        sum += storage.Sample(position, diameter, 5)*-normal.z;*/


            sum += storage.Sample(position, diameter, normal.x > 0 ? 0 : 1) * abs(normal.x);
            sum += storage.Sample(position, diameter, normal.y > 0 ? 2 : 3) * abs(normal.y);
            sum += storage.Sample(position, diameter, normal.z > 0 ? 4 : 5) * abs(normal.z);

            return sum;
        }
        override float4 SampleNearestMip(float3 position, float3 normal, float diameter)
        {
            float4 sum = float4(0, 0, 0, 0);

            sum += storage.SampleNearestMip(position, diameter, normal.x > 0 ? 0 : 1) * abs(normal.x);
            sum += storage.SampleNearestMip(position, diameter, normal.y > 0 ? 2 : 3) * abs(normal.y);
            sum += storage.SampleNearestMip(position, diameter, normal.z > 0 ? 4 : 5) * abs(normal.z);

            return sum;
        }
        override float4 SampleRaw(float3 pos, float mipmap, int textureID, int axis)
        {
            return storage.SampleRaw(pos, mipmap, textureID, axis);
        }
override float VoxelSize()
        {
            return storage.VoxelSize();
        }
override float4 Test()
        {
            return float4(0,1,0,1);
        }
    };
//}
