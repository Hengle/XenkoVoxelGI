shader VoxelAnisotropicPairedWriter_Float4 : VoxelLayout_Float4, NormalStream
{
    stream float4 axisX;
    stream float4 axisY;
    stream float4 axisZ;
    RWTexture3D<float4> DirectOutput;
    compose VoxelFragmentPacker writer;
    
    compose VoxelModifierApplierAnisotropicPaired Modifiers[];
	override void SetupStreamsDummy()
    {
        streams.axisX = float4(0,0,0,0);
        streams.axisY = float4(0,0,0,0);
        streams.axisZ = float4(0,0,0,0);
    }
	override void SetupStreams(float4 original)
    {
        streams.axisX = original * abs(streams.normalWS.x);
        streams.axisY = original * abs(streams.normalWS.y);
        streams.axisZ = original * abs(streams.normalWS.z);
    }
	override void VoxelizeDirect(uint3 address, uint stride)
    {
        float4 tempAxisX = streams.axisX;
        float4 tempAxisY = streams.axisY;
        float4 tempAxisZ = streams.axisZ;
        foreach (var modifier in Modifiers)
        {
            modifier.Apply(tempAxisX, tempAxisY, tempAxisZ);
        }
        streams.axisX = tempAxisX;
        streams.axisY = tempAxisY;
        streams.axisZ = tempAxisZ;

        DirectOutput[address] = streams.axisX;address.y += stride;
        DirectOutput[address] = streams.axisY;address.y += stride;
        DirectOutput[address] = streams.axisZ;
    }
	override void VoxelizeIndirectWrite(RWBuffer<uint> buffer, inout uint address)
    {
        writer.Write(buffer, address, streams.axisX);
        writer.Write(buffer, address, streams.axisY);
        writer.Write(buffer, address, streams.axisZ);
    }
	override void VoxelizeIndirectRead(RWBuffer<uint> buffer, inout uint address)
    {
        writer.Read(buffer, address, streams.axisX);
        writer.Read(buffer, address, streams.axisY);
        writer.Read(buffer, address, streams.axisZ);
    }
    override float4 Get()
    {
        return streams.axisX;
    }
};