shader VoxelAnisotropicWriter_Float4 : VoxelLayout_Float4, NormalStream
{
    stream float4 axisXP;
    stream float4 axisXN;
    stream float4 axisYP;
    stream float4 axisYN;
    stream float4 axisZP;
    stream float4 axisZN;
    RWTexture3D<float4> DirectOutput;
    compose VoxelFragmentPacker writer;
    
    compose VoxelModifierApplierAnisotropic Modifiers[];
	override void SetupStreamsDummy()
    {
        streams.axisXP = float4(0,0,0,0);
        streams.axisYP = float4(0,0,0,0);
        streams.axisZP = float4(0,0,0,0);
        streams.axisXN = float4(0,0,0,0);
        streams.axisYN = float4(0,0,0,0);
        streams.axisZN = float4(0,0,0,0);
    }
	override void SetupStreams(float4 original)
    {
        streams.axisXP = float4(0, 0, 0, 1);
        streams.axisYP = float4(0, 0, 0, 1);
        streams.axisZP = float4(0, 0, 0, 1);
        streams.axisXN = float4(0, 0, 0, 1);
        streams.axisYN = float4(0, 0, 0, 1);
        streams.axisZN = float4(0, 0, 0, 1);
        if (streams.normalWS.x > 0)
            streams.axisXP = original * streams.normalWS.x;
        else
            streams.axisXN = original * -streams.normalWS.x;

        if (streams.normalWS.y > 0)
            streams.axisYP = original * streams.normalWS.y;
        else
            streams.axisYN = original * -streams.normalWS.y;

        if (streams.normalWS.z > 0)
            streams.axisZP = original * streams.normalWS.z;
        else
            streams.axisZN = original * -streams.normalWS.z;
    }
	override void VoxelizeDirect(uint3 address, uint stride)
    {
        float4 tempAxisXP = streams.axisXP;
        float4 tempAxisXN = streams.axisXN;
        float4 tempAxisYP = streams.axisYP;
        float4 tempAxisYN = streams.axisYN;
        float4 tempAxisZP = streams.axisZP;
        float4 tempAxisZN = streams.axisZN;
        foreach (var modifier in Modifiers)
        {
            modifier.Apply(tempAxisXP, tempAxisXN, tempAxisYP, tempAxisYN, tempAxisZP, tempAxisZN);
        }
        streams.axisXP = tempAxisXP;
        streams.axisXN = tempAxisXN;
        streams.axisYP = tempAxisYP;
        streams.axisYN = tempAxisYN;
        streams.axisZP = tempAxisZP;
        streams.axisZN = tempAxisZN;
        DirectOutput[address] = streams.axisXP;
        address.y += stride;
            DirectOutput[address] = streams.axisXN;
        address.y += stride;
            DirectOutput[address] = streams.axisYP;
        address.y += stride;
            DirectOutput[address] = streams.axisYN;
        address.y += stride;
            DirectOutput[address] = streams.axisZP;
        address.y += stride;
            DirectOutput[address] = streams.axisZN;
    }
	override void VoxelizeIndirectWrite(RWBuffer<uint> buffer, inout uint address)
    {
            writer.Write(buffer, address, streams.axisXP);
            writer.Write(buffer, address, streams.axisXN);
            writer.Write(buffer, address, streams.axisYP);
            writer.Write(buffer, address, streams.axisYN);
            writer.Write(buffer, address, streams.axisZP);
            writer.Write(buffer, address, streams.axisZN);
    }
	override void VoxelizeIndirectRead(RWBuffer<uint> buffer, inout uint address)
    {
        writer.Read(buffer, address, streams.axisXP);
        writer.Read(buffer, address, streams.axisXN);
        writer.Read(buffer, address, streams.axisYP);
        writer.Read(buffer, address, streams.axisYN);
        writer.Read(buffer, address, streams.axisZP);
        writer.Read(buffer, address, streams.axisZN);
    }
    override float4 Get()
    {
        return streams.axisXP;
    }
};